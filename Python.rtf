{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat2\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid901\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid12}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs40 \cf0 Python \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0\fs26 \cf0 Python is a general-purpose, dynamically typed, high-level, compiled and interpreted, garbage-collected, and purely object-oriented programming language that supports procedural, object-oriented, and functional programming.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Variables:-\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0
\f2\b0\fs18 \cf0 {\listtext	\uc0\u8226 	}
\f1\fs26 Examples of valid identifiers: a123, _n, n_9, etc.\
\ls1\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f1\fs26 Examples of invalid identifiers: 1a, n%4, n 9, etc.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Assignments ( = ) and Multiple Assignments (a=b=5):-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 a = 5 //Assignment\
a = b = c = 5 //Multiple Assignment\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Data Types:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Where python can 
\f0\b automatically
\f1\b0  identify the type of variable.
\f0\b \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f1\b0 \cf0 {\listtext	0.	}int\
{\listtext	0.	}str\
{\listtext	0.	}Float\
{\listtext	0.	}complex\
{\listtext	0.	}bool\
{\listtext	0.	}list\
{\listtext	0.	}tuple\
{\listtext	0.	}range\
{\listtext	0.	}dict for dictionaries\
{\listtext	0.	}set for sets\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 To check the type of the variable using type or isinstance\
name = "csk"\
print(type(name)) #str\
print(type(name) == str) #true\
print(isinstance(name, str)) #true\
\
Note:- We can do type conversions as well using constructors like for example: float(2) -> 2.0,  str(3) -> \'933\'94\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs30 \cf0 Operators:-
\f1\b0\fs26 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Arithmetic Operators:- (=,+,-,/,**, //, % , *)
\f1\b0 \

\f0\b Comparison Operators:- (==, !=, >,<,>=,<=)\
Boolean Operators:- (not, and, or)\
Bitwise Operators:- (&,|, <<,>>,~, ^)\
is & in Operators:-\
Ternary/Conditional Operator:- 
\f1\b0 cond ? Statement - 1  statement - 2: \
\

\f0\b MutiLine String:-(""")\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 print(\'93\'94\'94 Beau is\
\
49\
\
Year old\
\'93\'94\'94)
\f0\b \

\f1\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Expected Output:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Beau is\
\
49\
\
Year old\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 String Methods:-\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls3\ilvl0
\f1\b0 \cf0 {\listtext	0.	}title()\
{\listtext	0.	}islower()\
{\listtext	0.	}join() \
{\listtext	0.	}etc\'85\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Escaping Character:- ( \\ )\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 It will add the one character like ( \'93 ) after to it.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 String Characters and Slicing:-\
Example:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Name = \'93Beau\'94\
print(name[ 1 : 2 ])\
Which starts from index 1 and ends at 2\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Output:- 
\f1\b0 e\
\

\f0\b Booleans:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls4\ilvl0
\f1\b0 \cf0 {\listtext	0.	}Numbers are always true except value 0\
{\listtext	0.	}Strings are false only when it is empty string( \'93\'94 ).\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Number DataTypes:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls5\ilvl0
\f1\b0 \cf0 {\listtext	0.	}complex() -> Which returns complex numbers img and real parts\
{\listtext	0.	}abs()\
{\listtext	0.	}round() etc\'85\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Enums:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Which is user create constant\'92s in python.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs28 \cf0 Lists:
\fs26 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 This is very similar to the JS lists, Where is accepts strings, boolean, numbers in a single list. Where we can apply slicing for mutation.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 superHeroes = [ \'93Rogers\'94, 1, \'93IronMan\'94, True]
\f0\b \
Methods in Lists:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls6\ilvl0
\f1\b0 \cf0 {\listtext	0.	}
\f0\b arr.extend([\'93Name\'94, 1, true,\'85])
\f1\b0  or array += [\'93\'94 ,\'94\'94] \'97> Used to push the new element into the list.\
{\listtext	0.	}
\f0\b Arr.remove(index
\f1\b0 ) => To remove the element from the list.\
{\listtext	0.	}
\f0\b Arr.insert(2) or arr[1:1] = [\'93String\'94 , \'93String\'94]
\f1\b0  => To add element at specific index value of the list.\
{\listtext	0.	}
\f0\b Arr.sort(val => val.lower)
\f1\b0  => By default descending order, to make ascending order need to include callback\
{\listtext	0.	}
\f0\b Sorted(arr, key=str.lower)
\f1\b0 => Which is the Global sorted method\
{\listtext	0.	}
\f0\b arr.pop(\'93Rogers\'94)
\f1\b0  => To delete the element\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Tuples:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 superHeroes = (\'93Captain\'94, \'93IronMan\'94)\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Dictionaries:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 This is like an objects in the javascript having key:value pairs which is denoted by the curly braces \{\}.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 heroes = \{\'93name\'94: \'93IronMan\'94, \'93power\'94: 100, \'93colour\'94: \'93red\'94\}
\f0\b \
\
heroes.key()
\f1\b0  -> which shows the entire list.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 list(heroes.key()) 
\f1\b0 -> Used to convert dictionary to list.\

\f0\b heroes.values() 
\f1\b0 -> Which shows the values of the dictionary.
\f0\b \
list(heroes.values()) 
\f1\b0 -> Also, we can convert to list\

\f0\b heroes.items()
\f1\b0  -> Which return all the items from the dictionary and also converts into list automatically.\

\f0\b Example Output:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 dict_items([('name', 'IronMan'), ('power', 100), ('colour', 'red')])\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 len(heroes) 
\f1\b0 -> Which return total length of the dictinary.\

\f0\b heroes.copy() 
\f1\b0 -> Which is used to clone the list or dictionary.\

\f0\b \
Sets: \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Sets are also denoted like an object but without a keys in curly braces \{\}.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 set1 = \{\'93IronMan\'94, \'93Hulk\'94\}\
set2 = \{\'93IronMan\'94\}\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 intersect 
\f1\b0 = set1 & set2\
Output: \{\'93IronMan\'94\}\
\

\f0\b union 
\f1\b0 = set1 | set2\
Output: \{\'93IronMan\'94, \'93Hulk\'94, \'93IronMan\'94\}\
\

\f0\b difference 
\f1\b0 = set1 - set2\
Output: \{\'93Hulk\'94\}\
\

\f0\b super_set 
\f1\b0 = set1 < set2\
Output: False\
\

\f0\b To convert sets to list\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 newSet = \{\'93IronMan\'94, \'93Hulk\'94, \'93\'94IronMan\}
\f0\b \
print(list(newSet))\

\f1\b0 Output: \{\'93IronMan\'94, \'93Hulk\'94\} //Duplicates gets removed during conversion.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Note: 
\f1\b0 Which removes the duplicates from the set.\

\f0\b \
Functions:-
\f1\b0 \
Functions are defined by using 
\f0\b def\
Syntax:-\
def
\f1\b0  function_Name():\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example
\f1\b0 :-(Using functions and Variables)\
def myFunction():\
	 a = 4\
	 b = 5\
	 c = a + b\
	return c;\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 def helloWorld():\
	greet = \'93Hello World\'94 \
\
response = helloWorld()\
print(response)\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Calling a function:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def
\f0\b  
\f1\b0 get_choices():\
	a = \'93apple\'94\
	b = \'93boy\'94\
	select = \{\'93fruit\'94 : 
\f0\b a
\f1\b0 , \'94gender\'94 : 
\f0\b b
\f1\b0 \}\
	return 
\f0\b select
\f1\b0 \
\
choices = 
\f0\b get_choices()
\f1\b0 \
print(choices) 
\f0\b //Print syntax\
\
NonLocal keyword:\

\f1\b0 Which is used to get access of the variable which is outside the nested function. Which is mostly useful while using clousers.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def func1():\
	
\f0\b count = 0
\f1\b0 \
	def func2():\
		
\f0\b nonlocal count
\f1\b0 \
		print(count)\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Objects in Python:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls7\ilvl0
\f1\b0 \cf0 {\listtext	0.	}real \
{\listtext	0.	}imag\
{\listtext	0.	}bit_length() etc\'85\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Loops:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 There are two kinds of loops\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls8\ilvl0\cf0 {\listtext	0.	}
\f0\b While loop
\f1\b0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 	
\f0\b Syntax:-\

\f1\b0 	while (condition):\
		statements\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls9\ilvl0
\f1\b0 \cf0 {\listtext	0.	}
\f0\b For loop  
\f1\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 	Syntax:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 	for item in items:\
		statement\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Note: If needed index use enumerate
\f1\b0 \
\
	for index, item in enumerate(items):\
		statement\
\

\f0\b Classes in Python:\
Syntax:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 class hero:\
	def func():\
		print(\'93captain\'94)\
\
Roger = hero()\
print(Roger)\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Constructor:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Constructor in python is created by using 
\f0\b --init\'97(self, \'85.)
\f1\b0  here self is mandatory argument \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 class hero:\
	
\f0\b def \'97init\'97(self, x, y):\
		self.x = x\
		self.y = y
\f1\b0 \
\
	def dispHero():\
		print(\'93Captain\'94)\
\
Roger = 
\f0\b hero
\f1\b0 (\'93IronMan\'94, \'93Hulk\'94)\
print(Roger.x)\
print(Roger.y)\
Roger.dispHero()\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Output:-
\f1\b0 \
IronMan\
Hulk\
Captain
\f0\b \
\
Inheritance: \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Here we can create a new class called power which is having a function called heroPower.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
class power:\
	def heroPower():\
		print(\'93100/100\'94) 
\f1\b0 \
\
class hero
\f0\b (power)
\f1\b0 :\
	def \'97init\'97(self, x, y):\
		self.x = x\
		self.y = y\
\
	def dispHero():\
		print(\'93Captain\'94)\

\f0\b \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Roger = 
\f0\b hero
\f1\b0 (\'93IronMan\'94, \'93Hulk\'94)\
print(Roger.x)\
print(Roger.y)\
Roger.dispHero()\
Roger.heroPower()\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Output:-
\f1\b0 \
IronMan\
Hulk\
Captain\
100/100
\f0\b \
\
User Input:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def
\f0\b  
\f1\b0 get_choices():\
	user_choice =
\f0\b  input(\'93Enter your choice: \'94)
\f1\b0 \
	a = \'93apple\'94\
	b = \'93boy\'94\
	select = \{\'93fruit\'94 : 
\f0\b user_choice,
\f1\b0  \'94gender\'94 : 
\f0\b b
\f1\b0 \}\
	return 
\f0\b select
\f1\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 choices = 
\f0\b get_choices()
\f1\b0 \
print(choices) 
\f0\b \
\
Libraries, Lists,Methods:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls10\ilvl0
\f1\b0 \cf0 {\listtext	0.	}
\f0\b random.choice(): 
\f1\b0 It will choose on element randomly from the array.
\f0\b \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def
\f0\b  
\f1\b0 get_choices():\
	options = [\'93Rock\'94, \'94Paper\'94, \'94Scissors\'94]\
	a = \'93Apple\'94\
	computer_choice =
\f0\b  random.choice(options)
\f1\b0 \
	select = \{\'93fruit\'94 : a, \'94gender\'94 : 
\f0\b computer_choice 
\f1\b0 \}\
	return 
\f0\b select
\f1\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 choices = 
\f0\b get_choices()
\f1\b0 \
print(choices) 
\f0\b \
\
F-string:\

\f1\b0 Which is very similar to template literals in javascript.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Syntax:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def check_win():\
	winner = \'93CSK\'94\
	year = 2023\
	print(
\f0\b f\'94\{winner\} 
\f1\b0 is the winner of the IPL in the year
\f0\b  \{year\}\'94
\f1\b0 )\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Expected Output:\
CSK
\f1\b0  is the winner of the IPL in the year 
\f0\b 2023\
\
Function Arguments:\
Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def check_win(winner, year):\
	print(
\f0\b f\'94\{winner\} 
\f1\b0 is the winner of the IPL in the year
\f0\b  \{year\}\'94
\f1\b0 )\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
check_win(\'93CSK\'94, 2023)\
\
Expected Output:\
CSK
\f1\b0  is the winner of the IPL in the year 
\f0\b 2023\
\
If and Elif Statements in Python:\
Syntax:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 If cond:\
	statement - 1\
Elif cond:\
	statement - 2\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Also, conditions in the if and elif statements by using 
\f0\b operators
\f1\b0  like AND and OR is like given below
\f0\b \

\f1\b0 If 
\f0\b cond - 1 and cond - 2:
\f1\b0 \
	statement - 1\
Elif 
\f0\b cond - 1 and cond - 2:
\f1\b0 \
	statement - 2\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Another approach for elif block which is a bit lengthy\
If cond - 1 and cond - 2:\
	statement - 1\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Elif cond - 1:\
	if cond - 2:\
		statement - 2\
\
\
Modules:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Which acts like a 
\f0\b packages
\f1\b0  in java where we can import function from one file to another. Using this we can import many inbuilt libraries in python like random, math, sys, argparse etc..\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Arguments in Command Line:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 To run python code in command line\
Command \'97> 
\f0\b python fileName.py
\f1\b0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Lamda Functions:\
Examples:
\f1\b0 \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls11\ilvl0\cf0 {\listtext	0.	}Double = lambda num : num * 2\
{\listtext	0.	}Multiply = lambda a, b : a * b\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 print(Double(2))\
print(Multiply(1, 2))\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Output:
\f1\b0 \
4\
2\

\f0\b \
Map, Filter and Reduce in Python:\
Map:\
Syntax:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 map(function, arr)\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 numbers = [1, 2, 3]\
\
Double = lambda a : a * 2\
Result = map(Double, numbers) \
\
print(list(Result))\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Output:\
[2, 4, 6]\
\
Note:- \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls12\ilvl0
\f1\b0 \cf0 {\listtext	0.	}map result should convert to list.\
{\listtext	0.	}Also, regular function using def is also preferable instead of lambda function
\f0\b \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
Filter:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 numbers = [1, 2, 3]\
\
evenOrOdd = lambda a : a % 2 === 0\
Result = filter(evenOrOdd, numbers) \
\
print(list(Result))
\f0\b \
\
Output:\
[2]\
\
Reduce:\

\f1\b0 expenses = [(\'93Captain\'94, 80), (\'93IronMan\'94, 95)]\
\
Sum = reduce(lambda a, b: a[1] + b[1], expenses)\
\
print(Sum)\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Decorators in Python:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 This is very similar to the Java Spring boot annotations which is denoted with \'91@\'91 followed by decorator name\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Syntax:-
\f1\b0 \
@decoratorName\
\

\f0\b Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def 
\f0\b decoratorIntro
\f1\b0 (
\f0\b func
\f1\b0 ):\
    def innerFunc():\
        print("before")\
        
\f0\b val = func()
\f1\b0 \
        print("after")\
        return val\
    return innerFunc\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 @decoratorIntro\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def dispHello():\
    print("Hello World")\
\
dispHello()\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 DocStrings( \'93\'94\'94 ):\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 This is just like a comment which will displayed in the output as well.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Annotations in Python:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Which is used for type safety. The below function arg allows only integer and function return integer.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 def increment(n: 
\f0\b int
\f1\b0 ) -> 
\f0\b int
\f1\b0 :\
	count: int = n\
	return count\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Exceptions:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Exceptions we have different block just like in java.\
try:\
	statements/logic\
except <ERROR1>:\
	error handling\
except <ERROR2>:\
	error handling\
else:\
	logic will run if no errors occurred\
finally:\
	statement/logic in any case it will run
\f0\b \
\
Example:\

\f1\b0 try:\
	result = 2/0\
except 
\f0\b ZeroDivisionError
\f1\b0 :\
	print(\'93\'94Cannot Divide by Zero)\
finally:\
	result = 1
\f0\b \
\
Note: \
-> 
\f1\b0 Else we can use 
\f0\b raise 
\f1\b0 keyword for exceptions.\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 -> 
\f1\b0 Also, we can create custom exception handlers using class.\

\f0\b -> 
\f1\b0 \

\f0\b Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 raise Exception(\'93An error!\'94)\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
Example:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 class 
\f0\b DogNotFoundException
\f1\b0 (Exception)\
	pass\
\
try:\
	
\f0\b raise
\f1\b0  
\f0\b DogNotFoundException
\f1\b0 ()\
except DogNotFoundException:\
	print(\'93Dog Not Found\'94)\
finally:\
	print()
\f0\b \
\
with Statement in Python:\

\f1\b0 Which is mostly useful when working with files in backend.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 pip in Python:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Command to install packages: pip install requests\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
List Compressions:\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 Which is preffered over the loops.\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:
\f1\b0 \
numbers = [1, 2, 3, 4, 5]\
\
result =
\f0\b  [n**2 for n in numbers] 
\f1\b0 \
\
print(result)\
\

\f0\b Output:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 [1, 4, 9, 16, 25]
\f0\b \
\
Polymorphism:- \
\
Operator Overloading:-\

\f1\b0 Here we have lo lot of methods like \'97gt\'97 (greater than), \'97lt\'97 (less than) etc..\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Example:-\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 class HeroPower:\
	def __init__(self, name, power):\
		self.name = name\
		self.power = power\
	def __gt__(self, other):\
		return True if self.power > other.power else False\
\
copatin = HeroPower(\'93Captain\'94, 90)\
ironMan = HeroPower(\'93Ironman\'94, 95)\
\
print(captain > ironman)\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0 \cf0 \
\
}