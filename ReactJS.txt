Introduction:-
->Open source library for building user interfaces.
->React is not a framework but it is a library.
->React has a rich ecosystem.
->React is created and maintained by Facebook.
->React has a component-based architecture.

Content:-
1. Fundamentals
2. HTTP
3. Routing
4. Redux
5. Utilities

Create React App:-
Creating react app in two ways
1. Using npx - which is the npm package runner.
-->npx create-react-app appName --template typescript
Which is used to generate react app using typescript.

2. Using npm
--> npm install create-react-app -g

3. To start
--> npm start or yarn start

Components in ReactJS:-
->Components are reusable.
-> Component's name should start with a capital letter in react.
->Component code in reactjs has .js extension and .jsx.
->Components are of two types
1. Stateless Functional Component:-
They are literally a js function.
Example:-
function Welcome(props){
 	return <h1>Hello</h1>;
}

2. Statefull class Component:-
They are regular ES6 components which are like
Class extending Component class { }

Example:-
class Welcome extends React.Component{
	render(){
		return <h1>Hello</h1>;s
	}
}


Example:- In app.js file 
import logo from './logo.svg';
import './App.css';

function App() {
  let name = "TI"
  let address = "Hyderabad"
  const course = <h1>ReactJS</h1>

  const user = (
    <div>{name}{address}</div>
  );

  return (
    <div className="App">
      {user}
      {course}
    </div>
  );
}

export default App;


Components in React:-

Tailwind Setup:-
--> npx tailwindcss init
In tailwind.config.js file 
content: ["./*.html"]

--> npx tailwindcss -i ./input.css -o ./style.css
--> npx tailwindcss -i ./input.css -o ./style.css --watch

Props In React:-
Example-1:-
import "./App.css";

function App() {
  return (
    <div>
      <Profile />
      <Link />
    </div>
  );
}

function Card({ children }) {
  return <div>{children}</div>;
}
function Profile() {
  return (
    <Card>
      <Avatar
        size={200}
        person={{
          name: "Image-1",
          imageUrl:
            "https://images.pexels.com/photos/1213447/pexels-photo-1213447.jpeg?auto=compress&cs=tinysrgb&w=600",
        }}
      />
    </Card>
  );
}
function Avatar(props: any) {
  return (
    <img
      src={props.person.imageUrl}
      width={props.size}
      height={props.size}
      alt={props.person.name}
    />
  );
}

function Link() {
  return (
    <Card>
      <form action="get">
        <label htmlFor="">Email: </label>
        <input type="text" placeholder="Eneter Email" />
      </form>
    </Card>
  );
}

export default App;

Example-2:-
import { useReducer, useState } from "react";
import "./App.css";

function App() {
  return (
    <div>
      <Profile />
      <Link />
    </div>
  );
}

function Card({ children }) {
  return <div>{children}</div>;
}
function Profile() {
  const [state, dispatch] = useReducer(reducer, { count: 100 });
  function handleClick() {
    dispatch({ type: "Click" });
  }
  return (
    <Card>
      <Avatar
        incBtn={handleClick}
        size={state?.count}
        person={{
          name: "Image-1",
          imageUrl:
            "https://images.pexels.com/photos/1213447/pexels-photo-1213447.jpeg?auto=compress&cs=tinysrgb&w=600",
        }}
      />
    </Card>
  );
}
function reducer(state, action) {
  if (action.type === "Click") {
    return {
      count: state.count + 20,
    };
  }
}

type propObj = {
  incBtn: () => void;
  size: number;
  person: { name: string; imageUrl: string };
};
function Avatar(props: propObj) {
  return (
    <div>
      <button onClick={props.incBtn}>Inc</button>
      <img
        src={props.person.imageUrl}
        width={props.size}
        height={props.size}
        alt={props.person.name}
      />
    </div>
  );
}

function Link() {
  return (
    <Card>
      <form action="get">
        <label htmlFor="">Email: </label>
        <input type="text" placeholder="Enter Email" />
      </form>
    </Card>
  );
}

export default App;

Hooks in ReactJS:-
-> Functions starting with "use" are called Hooks.
Where useState - is a built-in hook in react
-> We can also write our own hooks by combining existing once.
Built-in Hooks:-
1. State Hooks
We have to import hooks from React.
import { useState, useReducer } from "react";

	1. useState:-
	-> A state is a component's memory. When we call useState then we are telling to react that you want this component to remember something.

Toggle Button Example using useState:-
function ToDo() {
  const [showText, setText] = useState(true);

  const handleClick = () => {
    setText(!showText);
  };

  return (
    <div>
      <button className="w-52 bg-red-300 p-3" onClick={handleClick}>
        {showText ? "Hide" : "Show"}
      </button>
      {showText === true && <h1>React Tutorial</h1>}
    </div>
  );
}

	2. useReducer
	-> The reducer function specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return to the next state. State and action can be of any types.
	-> function reducer(state, action) { }
	-> useReducer returns an array with exactly two items: 
	  1. current state.
	  2. dispatch function.

Toggle Button Example Using Reduces:-
function ToDo() {
  const [state, dispatch] = useReducer(reducer, { toggle: true });

  function handleClick() {
    dispatch({ type: "Click" });
  }

  return (
    <>
      <div>
        <button
          className="bg-red-300 p-3 text-xl font-semibold"
          onClick={handleClick}
        >
          {!state.toggle ? "Show" : "Hide"}
        </button>
        {state.toggle && (
          <h1 className="text-3xl font-semibold">
            React Demo Using UseReducer
          </h1>
        )}
      </div>
    </>
  );
}

function reducer(state: { toggle: boolean }, action: { type: string }) {
  if (action.type === "Click") return { toggle: !state.toggle };
}
export default App;


Steps:-
->You update the state. When a user clicks the button, it calls setIndex(index + 1). index is 0, so it’s setIndex(1). ->This tells React to remember index is 1 now and triggers another render.
-> Your component’s second render. React still sees useState(0), but because React remembers that you set index to 1, it returns [1, setIndex] instead.

2. Context Hooks
	1. useContext
3. Ref Hooks
	1. useRef
	2. useImperativeHandle
4. Effect Hooks
	1. useEffect
	2. useLayoutEffect
	3. useInsertionEffect
5. Performance Hooks
	1. useMemo
	2. useCallback
	3. useTransition
	4. useDeferredValue
6. Other Hooks
	1. useDebugValue
	2. useId
	3. useSyncExternalStore


useEffect In React:-
useEffect is a react hook that lets you synchronize a component with an external system.

Syntax:-
useEffect(setup, dependencies);

useEffect(() => {//Whatever we write in this function it will execute every single time application renders},[dependencies])
Note:-
Whenever the dependencies are changed/updated then only useEffect() callback function is executed otherwise not. That is the use of dependencies.

Example:-
const [resourceType, setResourceType] = useState("Posts");
useEffect(() => {
	console.log("Execute");
},[resourceType]);

Here we have take an three buttons then in onclick(setResourceType("post/users/comments")) by clicking resourseType gets changed/updated.

Here we are telling react the whenever resourceType is getting changed then only run the function inside the useEffect().

Output:-
->Click on post button
Execute
->Click on Users button
Execute
->Click on post button twice
Execute //Only once but not twice because resourceType not updated.

useEffect(console.log("Resource Changed"); 
return () => {console.log("Return from resouce change")}, [resourceType]
)

Output:-
Return from resource change
Resource Changed

Note:-
Whatever we write in return function that will execute first and then remaining is next in useEffect() hook.

useRef() Hook:-
useRef is a React Hook that lets you reference a value that’s not needed for rendering.

Syntax:-
const ref = useRef(initialValue)

useContext() Hook in React:-
useContext provides a way to pass data through the component tree without having to pass props down manually at everu level.


Immer in React:-
By using immer we can mutate the objects and arrays freely. 

Example:- Mutating objects without immer.
import { useReducer, useState } from "react";
import "./App.css";

function App() {
  return <Form />;
}

function Form() {
  const [person, setPerson] = useState({
    name: "Niki de Saint Phalle",
    artwork: {
      title: "Blue Nana",
      city: "Hamburg",
      image: "https://4kwallpapers.com/images/walls/thumbs/11422.jpg",
    },
  });

  function handleName(e: any) {
    setPerson({
      ...person,
      name: e.target.value,
    });
  }

  function handleTitle(e: any) {
    setPerson({
      ...person,
      artwork: {
        ...person.artwork,
        title: e.target.value,
      },
    });
  }

  function handleCity(e: any) {
    setPerson({
      ...person,
      artwork: {
        ...person.artwork,
        city: e.target.value,
      },
    });
  }
  function handleImage(e: any) {
    setPerson({
      ...person,
      artwork: {
        ...person.artwork,
        image: e.target.value,
      },
    });
  }

  return (
    <div>
      <form action="">
        <div className="flex w-[40%] flex-col gap-5 p-3">
          <input
            className="border-2 border-black p-3"
            type="text"
            placeholder="enter name"
            value={person.name}
            onChange={handleName}
          />
          <input
            className="border-2 border-black p-3"
            type="text"
            placeholder="Title"
            onChange={handleTitle}
          />
          <input
            className="border-2 border-black p-3"
            type="text"
            placeholder="City"
            onChange={handleCity}
          />
          <input
            className="border-2 border-black p-3"
            type="text"
            placeholder="Image"
            onChange={handleImage}
          />
        </div>
        <div className="p-3 text-xl font-semibold">
          {"Name: " + person.name} <br />
          {"Title: " + person.artwork.title} <br />
          {"City: " + person.artwork.city} <br />
          <img src={person.artwork.image} alt="" />
        </div>
      </form>
    </div>
  );
}

export default App;

Coping objects in code tedious, by using immer we can write code again using immerJS.

Example:- Using immer
import { useReducer, useState } from "react";
import "./App.css";
import { produce } from "immer";

function App() {
  return <Form />;
}

function Form() {
  const [person, setPerson] = useState({
    name: "Niki de Saint Phalle",
    artwork: {
      title: "Blue Nana",
      city: "Hamburg",
      image: "https://4kwallpapers.com/images/walls/thumbs/11422.jpg",
    },
  });

  function handleName(e: any): object {
    const nextStatePerson = produce(person, draft => {
      draft.name = e.target.value;
    });
    setPerson(nextStatePerson);

    return nextStatePerson;

    // or

    // setPerson(produce(person, draft => {
    //   draft.name = e.target.value;
    // }))
  }
  return (
    <div>
      <div>
        <input
          type="text"
          placeholder="Enter Name"
          className="border-2 border-black p-3"
          onChange={handleName}
        />
      </div>
      <div>{person.name}</div>
    </div>
  );
}

export default App;


React Router:-
->Install router in react app by using the command
 --pnpm/npm i react-router-dom.
Import  {BrowserRouter, Routes, Route, Link, NavLink} from "react=router-dom";

function App(){
	<BrowserRouter>
		<Routes>
      			<Route path="/" element={<Dashboard variant="v1" />} />
			Note:- Instead of "/" we can also write index attribute.
      			<Route path="/v1" element={<Dashboard variant="v1" />} />
		        <Route path="/v2" element={<Dashboard variant="v2" />} />
		        <Route path="/framer" element={<User />} />
	        </Routes>
     	 <header>
       		<h1>Router Demo</h1>
	        <Link className="bg-blue-500 p-3 text-white" to={"/framer"}>
        	  Framer
	        </Link>
        	<Link className="bg-blue-500 p-3 text-white" to={"/v1"}>
	          V1 Dashboard
        	</Link>
      	</header>
	<BrowserRouter/>
}

Where <Link> and <NavLink> is always points towards the "/framer" and "/v1" respectively.
Note:- The above approach is outdated in react. We have some other new approach in react-router by using a function called createBrowserRouter.

Difference between <Link> and <NavLink>?
Where in NavLink we can give a style and className which works the same as the normal style in react, whereas in Link we cannot able to give any props.
Example:-
<NavLink to="" style{() => {}} className={() => {}}>...</NavLink>
<Link>...</Link>

Route Parameters:-
<Route path=":id"></Route>
where ":id" is the route param.
By using useParams() from "react-router-dom"
By using useRouteError() from "react-router-dom" we can do error handling.
useLocation() from "react-router-dom".

Making BreadCrumbs in React Routing:-
Which are useful to split the URL 
For suppose, localhost:3000/help/contact
We can display in the view like
In browser view: help > contact > ...

React Query:-
React query is the library of the react apps that are used to simplifies data fetching, caching, synchronization, and error handling without affect the global state of the application.

Installation of react query from tanstack:-
npm i @tanstack/react-query
npm i @tanstack/react-query-devtools

->With query we can do two things
1. Query - useQuery({...}) hook
2. Mutation - useMutation hook

1. Query (useQuery):-
Where useQuery is a object in that we have a lot of things but mainly two are important queryKey and queryFn(always takes a async function like promises).

Example:- In the below example we create a array of objects "POSTS" by using wait() function which returns Promise using useQuery() hook.
import { useQuery } from "@tanstack/react-query";

const POSTS = [
  { id: 1, title: "post 1" },
  { id: 2, title: "post 2" },
];

export function RQuery() {
  const postsQuery = useQuery({
    queryKey: ["posts"],
    queryFn: () => wait(1000).then(() => [...POSTS]),
  });
  if (postsQuery.isLoading) return <h1>Loading...</h1>;
  if (postsQuery.isError) return <pre>{JSON.stringify(postsQuery.error)}</pre>;
  return (
    <>
      {postsQuery.data.map(post => (
        <div key={post.id}>{post.title}</div>
      ))}
    </>
  );
}

function wait(duration: number) {
  return new Promise(resolve => setTimeout(resolve, duration));
}

How to write a queryKey
/posts -> ["posts"]
/posts/1 -> ["posts", post.id]
/posts?authorId=1 -> ["posts", {author: 1}]
/posts/2/comments -> ["posts", post.id, "comments"]

->Query is works like fresh -> fetching -> status. We can also stop this by using stateTime: 1000 or by refetchInterval: 1000 in query object.
-> In Query.fetchStatus we have three methods 
1. fetching
2. idle
3. paused

-> In Query.status we have three methods 
1. error
2. loading
3. success

Mutation:-
Same as in Query, In the mutation we have a mutationFn which will handle the  async function like promises.
Example:-From the above example, we can mutate the POSTS object by using the useMutation.
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

type PostType = {
  id: number | string;
  title: string;
};

const POSTS: PostType[] = [
  { id: 1, title: "post 1" },
  { id: 2, title: "post 2" },
];

export function RQuery() {
  const queryCLient = useQueryClient();

  const postsQuery = useQuery({
    queryKey: ["posts"],
    queryFn: () => wait(1000).then(() => [...POSTS]),
  });

  const postMutation = useMutation({
    mutationFn: title => {
      return wait(1000).then(() =>
        POSTS.push({ id: crypto.randomUUID(), title })
      );
    },
    onSuccess: () => {
      queryCLient.invalidateQueries(["posts"]);
    },
  });

  if (postsQuery.isLoading) return <h1>Loading...</h1>;
  if (postsQuery.isError) return <pre>{JSON.stringify(postsQuery.error)}</pre>;

  return (
    <>
      {postsQuery.data.map(post => (
        <div key={post.id}>{post.title}</div>
      ))}
      <button
        onClick={() => {
          postMutation.mutate("New Post");
        }}
      >
        Mutation
      </button>
    </>
  );
}
function wait(duration: number) {
  return new Promise(resolve => setTimeout(resolve, duration));
}

isFetching Transition:-
That is because React Query exposes a lot of meta information for each query, and isFetching is one of them. This flag will always be true when a request is in-flight. This is quite useful if you want to display a background loading indicator. But it's also kinda unnecessary if you don't do that.

notifyOnChangeProps:-
React Query has the notifyOnChangeProps option. It tells react query that please only inform this observer about the changes if one of these props change. By setting this option to ['data'], we will find optimized versions.
Example:-
export const useTodosQuery = (select, notifyOnChangeProps) =>
  useQuery({
    queryKey: ['todos'],
    queryFn: fetchTodos,
    select,
    notifyOnChangeProps,
  })
export const useTodosCount = () =>
  useTodosQuery((data) => data.length, ['data'])

Staying in sync:-
While the above code works, it can get out of sync quite easily.

Example:-
export const useTodosCount = () =>
  useTodosQuery((data) => data.length, ['data'])

function TodosCount() {
  const { error, data } = useTodosCount()

  return (
    <div>
      {error ? error : null}
      {data ? data : null}
    </div>
  )
}

Tracked Queries:-
Set notifyOnChangeProps to 'tracked', React Query will keep track of the fields you are using during render, and will use this to compute the list. Tracked queries only work "during render". Update: Starting with v4, tracked queries are turned on per default in React Query, and you can opt out of the feature with notifyOnChangeProps: 'all'.

Structural Sharing:-
This feature makes sure that we keep referential identity of our data on every level.It also only works on json-serializable data. If you don't need this optimization, you can turn it off by setting structuralSharing: false on any query.

Mock Service Worker (MSW):-



JOTAI In React:-
Features in Jotai:-
Minimal core API (2kb)
Many utilities and integrations
TypeScript oriented
Works with Next.js, Gatsby, Remix, and React Native
React Fast Refresh with SWC and Babel plugins

Atom:-
-> An atom config is an immutable object. The atom config object doesn't hold a value. The atom value exists in a store.

-> To create a primitive atom (config), all you need is to provide an initial value.

Example:-
import { atom } from 'jotai'

const priceAtom = atom(10)
const messageAtom = atom('hello')
const productAtom = atom({ id: 12, name: 'good stuff' })

-> There are two kinds of atoms: a writable atom and a read-only atom. Primitive atoms are always writable. Derived atoms are writable if the write is specified. The write of primitive atoms is equivalent to the setState of React.useState.

onMount property:-
The created atom config can have an optional property onMount. onMount is a function that takes a function setAtom and returns the onUnmount function optionally.

The onMount function is called when the atom is first used in a provider, and onUnmount is called when it’s no longer used. In some edge cases, an atom can be unmounted and then mounted immediately.

useAtom in Jotai:-
The useAtom hook is to read an atom value in the state. The state can be seen as a WeakMap of atom configs and atom values.

The useAtom hook returns the atom value and an update function as a tuple, just like React's useState. It takes an atom config created with atom().

Syntax:-
const [value, setValue] = useAtom(anAtom)

The setValue takes just one argument, which will be passed to the third argument of the write function of the atom. The behavior depends on how the write function is implemented.

  const [atomValue] = useAtom(atom(0)) // This will cause an infinite loop
  const [atomValue] = useAtom(stableAtom) // This is fine

Store in Jotai:-
This function is to create a new empty store. The store can be used to pass in Provider.

The store has three methods: 
1. get for getting atom values, 
2. set for setting atom values, and 
3. sub for subscribing to atom changes.

Syntax:-
const myStore = createStore()

Storage in Jotai:-
The atomWithStorage function creates an atom with a value persisted in localStorage or sessionStorage for React or AsyncStorage for React Native.



















